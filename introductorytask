#include <stdio.h>
#include <iostream>
#include "opencv2/core.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
using namespace cv;

int main()
{
    namedWindow("Colour Finder");
    namedWindow("Original");
   // int lowH=0, highH=179, lowS=0, highS=255, lowV=0, highV=255; //Variables for each HSV number
    while(1)
    {
       int x=0; //flag
        int redPixels=0,greenPixels=0,bluePixels=0,yellowPixels=0,blackPixels=0;
        Mat frame=imread("GreenApple.bmp"); //Reads in image
        Mat frameHSV; //HSV image variable store
        Mat red;
        cvtColor(frame,red,COLOR_BGR2HSV); //converts BGR to HSV
        Mat green;
        cvtColor(frame,green,COLOR_BGR2HSV); //converts BGR to HSV
        Mat blue;
        cvtColor(frame,blue,COLOR_BGR2HSV); //converts BGR to HSV
        Mat yellow;
        cvtColor(frame,yellow,COLOR_BGR2HSV); //converts BGR to HSV
        Mat black;
        cvtColor(frame,black,COLOR_BGR2HSV); //converts BGR to HSV
        inRange(red, Scalar(0,50,50), Scalar(35,255,255),red);
        inRange(green, Scalar(37,50,50), Scalar(80,255,255),green);
        inRange(blue, Scalar(100,50,50), Scalar(140,255,255),blue);
        inRange(yellow, Scalar(25,50,50), Scalar(34,255,255),yellow);
        inRange(black, Scalar(0,0,0), Scalar(179,255,30),black);
        redPixels=countNonZero(red);
        greenPixels=countNonZero(green);
        bluePixels=countNonZero(blue);
        yellowPixels=countNonZero(yellow);
        blackPixels=countNonZero(black);
        if ((redPixels>bluePixels) && (redPixels>greenPixels) && (redPixels>yellowPixels) && (redPixels>blackPixels))
            x=0;
        else if ((greenPixels>redPixels) && (greenPixels>bluePixels) && (greenPixels>yellowPixels) && (redPixels>blackPixels))
            x=1;
        else if ((bluePixels>redPixels) && (bluePixels>greenPixels) && (bluePixels>yellowPixels) && (bluePixels>blackPixels))
            x=2;
        else if ((yellowPixels>redPixels) && (yellowPixels>greenPixels) && (yellowPixels>bluePixels) && (yellowPixels>blackPixels))
            x=3;
        else if ((blackPixels>redPixels) && (blackPixels>greenPixels) && (blackPixels>bluePixels) && (blackPixels>yellowPixels))
            x=4;
        else
            x=5;
        switch (x)
        {
        case 0:
            printf("The colour is red");
            imshow("Colour Finder",red);
            imshow("Original",frame);
            break;
        case 1:
            printf("The colour is green");
            imshow("Colour Finder",green);
            imshow("Original",frame);
            break;
        case 2:
            printf("The colour is blue");
            imshow("Colour Finder",blue);
            imshow("Original",frame);
            break;
        case 3:
            printf("The colour is yellow");
            imshow("Colour Finder",yellow);
            imshow("Original",frame);
            break;
        case 4:
            printf("The colour is black");
            imshow("Colour Finder",black);
            imshow("Original",frame);
            break;
        case 5:
            printf("ERROR");
            imshow("Colour Finder",frame);
            imshow("Original",frame);
            break;
        }
        int key=cv::waitKey(1); //display comparison image
        key=(key==255) ?-1:key;
        if (key==27)
            break;
    }
    destroyAllWindows(); //closes everything
    return 0;
}
